// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

version = '1.0.0'
sourceCompatibility = 1.7
targetCompatibility = 1.7

project.ext.set('mainClassName', 'MainApplication')

// Example customization of MANIFEST.MF
jar {
	manifest {
		attributes 'Implementation-Title': 'Reflection Utils',
				   'Implementation-Version':  version,
				   'Main-Class': mainClassName
	}
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter() // or mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    testCompile 'junit:junit:4.12'
	
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.5'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

	compile group: 'com.google.guava', name: 'guava', version: '19.0'
	compile group: 'org.reflections', name: 'reflections', version: '0.9.10'
}

// Create a single Jar with all dependencies.
task fatJar(type: Jar) {
	baseName = project.name + '-all'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.2.1'
}

// Sample task that will be recorded in the gradle tasks call. Calling this task will print out Hello World!
task hello << {
	println 'Hello World!'
}